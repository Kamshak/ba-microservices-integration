# Required Environment Variables to run this script:
# GCLOUD_CLUSTER: Cluster to deploy the application into
# GCLOUD_SERVICEACCOUNT_KEY: Serviceaccount JSON Key File serialized as base64 (echo file.json | base64 --wrap=0)
# GCLOUD_REGION / GCLOUD_ZONE: Google cloud region/zone
# AWS_REGION: AWS Region for ECR
# AWS_REGISTRY_URL: Registry URL for ECR without /repository suffic
# AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION
# VALUE_OVERRIDE: Overrides for Jinja2 replacing. Use to override mysql passwords and other secrets from the values.toml file. Format = -D <key>=<value> -D <key2>=<value2>
# For E2E Selenium Testing via Sauce Labs: SAUCE_USERNAME / SAUCE_ACCESS_KEY

sudo: required
services:
  - docker
language: node_js
node_js:
  - "6"
cache:
directories:
  - /var/lib/docker
addons:
  sauce_connect: true
git:
  submodules: false

before_install:
  # Install submodules
  - sed -i 's/git@github.com:/https:\/\/github.com\//' .gitmodules
  - git submodule update --init --recursive

  - ls -lisa

  # Install AWS CLI
  - npm install -g gulp bower node-gyp
  - pip install --user awscli
  - export PATH=$PATH:$HOME/.local/bin

  # Install Jinja2 CLI
  - git clone https://github.com/Kamshak/jinja2-cli.git
  - pushd jinja2-cli
  - python setup.py install --user
  - popd
  - sudo pip install toml --user

  # Log into GCloud
  - export CLOUDSDK_CORE_DISABLE_PROMPTS=1
  - curl https://sdk.cloud.google.com | sudo CLOUDSDK_CORE_DISABLE_PROMPTS=true bash
  - export PATH=$HOME/google-cloud-sdk/bin:$PATH
  - sudo CLOUDSDK_CORE_DISABLE_PROMPTS=1 /home/travis/google-cloud-sdk/bin/gcloud components install kubectl
  - sudo chmod 777 -R /home/travis/
  - sudo chown -R travis:travis /home/travis/
  - gcloud version
  - mkdir -p /tmp/serviceaccount
  - echo $GCLOUD_SERVICEACCOUNT_KEY | base64 -d > /tmp/serviceaccount_key.json
  - gcloud auth activate-service-account --key-file /tmp/serviceaccount_key.json
  - gcloud config set compute/region $GCLOUD_REGION
  - gcloud config set compute/zone $GCLOUD_ZONE
  - gcloud config set core/project $GCLOUD_PROJECT
  - gcloud container clusters get-credentials $GCLOUD_CLUSTER

  # Install deployment tool dependencies
  - cd deployment-tool
  - npm install
  - cd ..

install:
  # Deploy into Test Cluster
  - export KUBE_NAMESPACE=staging
  - kubectl get namespace $KUBE_NAMESPACE; if (($? > 0)); then kubectl create namespace $KUBE_NAMESPACE; fi || true # Create ns if not exists
  - bash create-ecr-imagepullsecret.sh  # Update pull secret
  - bash replace_templates.sh | node deployment-tool/index.js
  - bash update_service_endpoints.sh

  # Install End-To-End Test dependencies
  - cd e2e
  - npm install

  # Run E2E Tests
  - export WEB_ENDPOINT=http://$(kubectl get svc web-service --namespace=$KUBE_NAMESPACE -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
  - gulp protractor
  - cd ..
  - rm deployment-tool/deployments.txt # Remove deplyoments store of deployments that were successful to prevent rollback.sh from rolling them back

  # Deploy into Production
  - export KUBE_NAMESPACE=production
  - kubectl get namespace $KUBE_NAMESPACE; if (($? > 0)); then kubectl create namespace $KUBE_NAMESPACE; fi || true # Create ns if not exists
  - bash create-ecr-imagepullsecret.sh  # Update pull secret
  - bash replace_templates.sh | node deployment-tool/index.js
  - bash update_service_endpoints.sh

  # Run E2E Again as smoke test
  - cd e2e
  - export WEB_ENDPOINT=http://$(kubectl get svc web-service --namespace=$KUBE_NAMESPACE -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
  - gulp protractor
  - cd ..

after_failure:
  - bash rollback.sh # Roll back deployments

script: true
